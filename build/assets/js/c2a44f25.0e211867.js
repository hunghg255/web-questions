/*! For license information please see c2a44f25.0e211867.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[6605],{44268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>b,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(85893),s=n(11151);const o={sidebar_position:15,title:"useMemoByObjectVariables",comment:!0,tags:["Reactjs","Custom Hook","useMemoByObjectVariables"]},r=void 0,c={id:"reactjs/custom-hook/useMemoByObjectVariables",title:"useMemoByObjectVariables",description:"",source:"@site/issues/reactjs/custom-hook/useMemoByObjectVariables.md",sourceDirName:"reactjs/custom-hook",slug:"/reactjs/custom-hook/useMemoByObjectVariables",permalink:"/issues/reactjs/custom-hook/useMemoByObjectVariables",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/issues/reactjs/custom-hook/useMemoByObjectVariables.md",tags:[{label:"Reactjs",permalink:"/issues/tags/reactjs"},{label:"Custom Hook",permalink:"/issues/tags/custom-hook"},{label:"useMemoByObjectVariables",permalink:"/issues/tags/use-memo-by-object-variables"}],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,title:"useMemoByObjectVariables",comment:!0,tags:["Reactjs","Custom Hook","useMemoByObjectVariables"]},sidebar:"tutorialSidebar",previous:{title:"useMergeRefs",permalink:"/issues/reactjs/custom-hook/use-merge-ref"},next:{title:"useDelayedState",permalink:"/issues/reactjs/custom-hook/useDelayedState"}},u={},l=[];function i(e){const t={code:"code",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"live noInline",live:!0,children:"const aStackPool = [];\nconst bStackPool = [];\n\n/**\n * Checks if two values are equal. Values may be primitives, arrays, or objects.\n * Returns true if both arguments have the same keys and values.\n *\n * @see http://underscorejs.org\n * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * @license MIT\n */\nexport function areEqual(a, b) {\n  const aStack = aStackPool.length ? aStackPool.pop() : [];\n  const bStack = bStackPool.length ? bStackPool.pop() : [];\n  const result = eq(a, b, aStack, bStack);\n  aStack.length = 0;\n  bStack.length = 0;\n  aStackPool.push(aStack);\n  bStackPool.push(bStack);\n  return result;\n}\n\nfunction eq(a, b, aStack, bStack) {\n  if (a === b) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    return a !== 0 || 1 / a == 1 / b;\n  }\n  if (a == null || b == null) {\n    // a or b can be `null` or `undefined`\n    return false;\n  }\n  if (typeof a != 'object' || typeof b != 'object') {\n    return false;\n  }\n  const objToStr = Object.prototype.toString;\n  const className = objToStr.call(a);\n  if (className != objToStr.call(b)) {\n    return false;\n  }\n  switch (className) {\n    case '[object String]':\n      return a == String(b);\n    case '[object Number]':\n      return isNaN(a) || isNaN(b) ? false : a == Number(b);\n    case '[object Date]':\n    case '[object Boolean]':\n      return +a == +b;\n    case '[object RegExp]':\n      return (\n        a.source == b.source &&\n        a.global == b.global &&\n        a.multiline == b.multiline &&\n        a.ignoreCase == b.ignoreCase\n      );\n  }\n  // Assume equality for cyclic structures.\n  let length = aStack.length;\n  while (length--) {\n    if (aStack[length] == a) {\n      return bStack[length] == b;\n    }\n  }\n  aStack.push(a);\n  bStack.push(b);\n  let size = 0;\n  // Recursively compare objects and arrays.\n  if (className === '[object Array]') {\n    size = a.length;\n    if (size !== b.length) {\n      return false;\n    }\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (size--) {\n      if (!eq(a[size], b[size], aStack, bStack)) {\n        return false;\n      }\n    }\n  } else {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {\n      return a.valueOf() == b.valueOf();\n    }\n    const keys = Object.keys(a);\n    if (keys.length != Object.keys(b).length) {\n      return false;\n    }\n    for (let i = 0; i < keys.length; i++) {\n      if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {\n        return false;\n      }\n    }\n  }\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\nconst j = 0;\n\nexport function useMemoByObjectVariables(a) {\n  const _ref = React.useRef(j);\n  const [state, setState] = React.useState(a);\n\n  const _areEqual = !areEqual(a, state);\n  if (_areEqual) {\n    _ref.current += 1;\n    setState(a);\n  }\n\n  const f = React.useMemo(\n    function () {\n      return a;\n    },\n    [_ref.current],\n  );\n\n  return React.useMemo(\n    function () {\n      return [f, _ref.current];\n    },\n    [f],\n  );\n}\n\nconst App = () => {\n  const previousCount = useMemoByObjectVariables(count);\n\n  return <>useMergeRefs</>;\n};\n\nrender(<App />);\n"})})}function b(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},75251:(e,t,n)=>{var a=n(67294),s=Symbol.for("react.element"),o=Symbol.for("react.fragment"),r=Object.prototype.hasOwnProperty,c=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var a,o={},l=null,i=null;for(a in void 0!==n&&(l=""+n),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(i=t.ref),t)r.call(t,a)&&!u.hasOwnProperty(a)&&(o[a]=t[a]);if(e&&e.defaultProps)for(a in t=e.defaultProps)void 0===o[a]&&(o[a]=t[a]);return{$$typeof:s,type:e,key:l,ref:i,props:o,_owner:c.current}}t.Fragment=o,t.jsx=l,t.jsxs=l},85893:(e,t,n)=>{e.exports=n(75251)},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>r});var a=n(67294);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);