/*! For license information please see 63744a03.8d954002.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[1640],{92034:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=s(85893),t=s(11151);const i={sidebar_position:10,title:"Question 91 - 100",comment:!0,tags:["Javascript"]},c=void 0,a={id:"javascripts/question-10",title:"Question 91 - 100",description:"91. What's the output?",source:"@site/questions/javascripts/question-10.md",sourceDirName:"javascripts",slug:"/javascripts/question-10",permalink:"/questions/javascripts/question-10",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/questions/javascripts/question-10.md",tags:[{label:"Javascript",permalink:"/questions/tags/javascript"}],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Question 91 - 100",comment:!0,tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Question 81 - 90",permalink:"/questions/javascripts/question-9"},next:{title:"Question 101 - 110",permalink:"/questions/javascripts/question-11"}},o={},l=[{value:"91. What&#39;s the output?",id:"91-whats-the-output",level:3},{value:"Answer: D",id:"answer-d",level:4},{value:"92. What&#39;s the output?",id:"92-whats-the-output",level:6},{value:"Answer: D",id:"answer-d-1",level:4},{value:"93. What&#39;s the output?",id:"93-whats-the-output",level:6},{value:"Answer: A",id:"answer-a",level:4},{value:"94. What&#39;s the output?",id:"94-whats-the-output",level:6},{value:"Answer: D",id:"answer-d-2",level:4},{value:"95. What&#39;s the output?",id:"95-whats-the-output",level:6},{value:"Answer: B",id:"answer-b",level:4},{value:"96. What&#39;s the output?",id:"96-whats-the-output",level:6},{value:"Answer: B",id:"answer-b-1",level:4},{value:"97. What&#39;s the output?",id:"97-whats-the-output",level:6},{value:"Answer: D",id:"answer-d-3",level:4},{value:"98. What&#39;s the output?",id:"98-whats-the-output",level:6},{value:"Answer: A",id:"answer-a-1",level:4},{value:"99. What&#39;s the output?",id:"99-whats-the-output",level:6},{value:"Answer: C",id:"answer-c",level:4},{value:"100. What&#39;s the value of output?",id:"100-whats-the-value-of-output",level:6},{value:"Answer: B",id:"answer-b-2",level:4}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",h6:"h6",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"91-whats-the-output",children:"91. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"let newList = [1, 2, 3].push(4);\n\nconsole.log(newList.push(5));\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4, 5]"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 5]"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4]"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Error"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".push"})," method returns the ",(0,r.jsx)(n.em,{children:"new length"})," of the array, not the array itself! By setting ",(0,r.jsx)(n.code,{children:"newList"})," equal to ",(0,r.jsx)(n.code,{children:"[1, 2, 3].push(4)"}),", we set ",(0,r.jsx)(n.code,{children:"newList"})," equal to the new length of the array: ",(0,r.jsx)(n.code,{children:"4"}),"."]}),(0,r.jsxs)(n.p,{children:["Then, we try to use the ",(0,r.jsx)(n.code,{children:".push"})," method on ",(0,r.jsx)(n.code,{children:"newList"}),". Since ",(0,r.jsx)(n.code,{children:"newList"})," is the numerical value ",(0,r.jsx)(n.code,{children:"4"}),", we cannot use the ",(0,r.jsx)(n.code,{children:".push"})," method: a TypeError is thrown."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"92-whats-the-output",children:"92. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function giveLydiaPizza() {\n  return 'Here is pizza!';\n}\n\nconst giveLydiaChocolate = () => \"Here's chocolate... now go hit the gym already.\";\n\nconsole.log(giveLydiaPizza.prototype);\nconsole.log(giveLydiaChocolate.prototype);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"{ constructor: ...}"})," ",(0,r.jsx)(n.code,{children:"{ constructor: ...}"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"{}"})," ",(0,r.jsx)(n.code,{children:"{ constructor: ...}"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"{ constructor: ...}"})," ",(0,r.jsx)(n.code,{children:"{}"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"{ constructor: ...}"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-1",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["Regular functions, such as the ",(0,r.jsx)(n.code,{children:"giveLydiaPizza"})," function, have a ",(0,r.jsx)(n.code,{children:"prototype"})," property, which is an object (prototype object) with a ",(0,r.jsx)(n.code,{children:"constructor"})," property. Arrow functions however, such as the ",(0,r.jsx)(n.code,{children:"giveLydiaChocolate"})," function, do not have this ",(0,r.jsx)(n.code,{children:"prototype"})," property. ",(0,r.jsx)(n.code,{children:"undefined"})," gets returned when trying to access the ",(0,r.jsx)(n.code,{children:"prototype"})," property using ",(0,r.jsx)(n.code,{children:"giveLydiaChocolate.prototype"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"93-whats-the-output",children:"93. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = {\n  name: 'Lydia',\n  age: 21,\n};\n\nfor (const [x, y] of Object.entries(person)) {\n  console.log(x, y);\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"name"})," ",(0,r.jsx)(n.code,{children:"Lydia"})," and ",(0,r.jsx)(n.code,{children:"age"})," ",(0,r.jsx)(n.code,{children:"21"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'["name", "Lydia"]'})," and ",(0,r.jsx)(n.code,{children:'["age", 21]'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'["name", "age"]'})," and ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Error"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Object.entries(person)"})," returns an array of nested arrays, containing the keys and objects:"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]"})}),(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"for-of"})," loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using ",(0,r.jsx)(n.code,{children:"const [x, y]"}),". ",(0,r.jsx)(n.code,{children:"x"})," is equal to the first element in the subarray, ",(0,r.jsx)(n.code,{children:"y"})," is equal to the second element in the subarray."]}),(0,r.jsxs)(n.p,{children:["The first subarray is ",(0,r.jsx)(n.code,{children:'[ "name", "Lydia" ]'}),", with ",(0,r.jsx)(n.code,{children:"x"})," equal to ",(0,r.jsx)(n.code,{children:'"name"'}),", and ",(0,r.jsx)(n.code,{children:"y"})," equal to ",(0,r.jsx)(n.code,{children:'"Lydia"'}),", which get logged.\nThe second subarray is ",(0,r.jsx)(n.code,{children:'[ "age", 21 ]'}),", with ",(0,r.jsx)(n.code,{children:"x"})," equal to ",(0,r.jsx)(n.code,{children:'"age"'}),", and ",(0,r.jsx)(n.code,{children:"y"})," equal to ",(0,r.jsx)(n.code,{children:"21"}),", which get logged."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"94-whats-the-output",children:"94. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function getItems(fruitList, ...args, favoriteFruit) {\n  return [...fruitList, ...args, favoriteFruit]\n}\n\ngetItems(["banana", "apple"], "pear", "orange")\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'["banana", "apple", "pear", "orange"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'[["banana", "apple"], "pear", "orange"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'["banana", "apple", ["pear"], "orange"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"SyntaxError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-2",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"...args"})," is a rest parameter. The rest parameter's value is an array containing all remaining arguments, ",(0,r.jsx)(n.strong,{children:"and can only be the last parameter"}),"! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function getItems(fruitList, favoriteFruit, ...args) {\n  return [...fruitList, ...args, favoriteFruit];\n}\n\ngetItems(['banana', 'apple'], 'pear', 'orange');\n"})}),(0,r.jsxs)(n.p,{children:["The above example works. This returns the array ",(0,r.jsx)(n.code,{children:"[ 'banana', 'apple', 'orange', 'pear' ]"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"95-whats-the-output",children:"95. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function nums(a, b) {\n  if (a > b) console.log('a is bigger');\n  else console.log('b is bigger');\n  return;\n  a + b;\n}\n\nconsole.log(nums(4, 2));\nconsole.log(nums(1, 2));\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"a is bigger"}),", ",(0,r.jsx)(n.code,{children:"6"})," and ",(0,r.jsx)(n.code,{children:"b is bigger"}),", ",(0,r.jsx)(n.code,{children:"3"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"a is bigger"}),", ",(0,r.jsx)(n.code,{children:"undefined"})," and ",(0,r.jsx)(n.code,{children:"b is bigger"}),", ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"undefined"})," and ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"SyntaxError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:["In JavaScript, we don't ",(0,r.jsx)(n.em,{children:"have"})," to write the semicolon (",(0,r.jsx)(n.code,{children:";"}),") explicitly, however the JavaScript engine still adds them after statements. This is called ",(0,r.jsx)(n.strong,{children:"Automatic Semicolon Insertion"}),". A statement can for example be variables, or keywords like ",(0,r.jsx)(n.code,{children:"throw"}),", ",(0,r.jsx)(n.code,{children:"return"}),", ",(0,r.jsx)(n.code,{children:"break"}),", etc."]}),(0,r.jsxs)(n.p,{children:["Here, we wrote a ",(0,r.jsx)(n.code,{children:"return"})," statement, and another value ",(0,r.jsx)(n.code,{children:"a + b"})," on a ",(0,r.jsx)(n.em,{children:"new line"}),". However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after ",(0,r.jsx)(n.code,{children:"return"}),". You could see this as:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"return;\na + b;\n"})}),(0,r.jsxs)(n.p,{children:["This means that ",(0,r.jsx)(n.code,{children:"a + b"})," is never reached, since a function stops running after the ",(0,r.jsx)(n.code,{children:"return"})," keyword. If no value gets returned, like here, the function returns ",(0,r.jsx)(n.code,{children:"undefined"}),". Note that there is no automatic insertion after ",(0,r.jsx)(n.code,{children:"if/else"})," statements!"]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"96-whats-the-output",children:"96. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Person {\n  constructor() {\n    this.name = 'Lydia';\n  }\n}\n\nPerson = class AnotherPerson {\n  constructor() {\n    this.name = 'Sarah';\n  }\n};\n\nconst member = new Person();\nconsole.log(member.name);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'"Lydia"'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"Sarah"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"Error: cannot redeclare Person"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"SyntaxError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b-1",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:["We can set classes equal to other classes/function constructors. In this case, we set ",(0,r.jsx)(n.code,{children:"Person"})," equal to ",(0,r.jsx)(n.code,{children:"AnotherPerson"}),". The name on this constructor is ",(0,r.jsx)(n.code,{children:"Sarah"}),", so the name property on the new ",(0,r.jsx)(n.code,{children:"Person"})," instance ",(0,r.jsx)(n.code,{children:"member"})," is ",(0,r.jsx)(n.code,{children:'"Sarah"'}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"97-whats-the-output",children:"97. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const info = {\n  [Symbol('a')]: 'b',\n};\n\nconsole.log(info);\nconsole.log(Object.keys(info));\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"{Symbol('a'): 'b'}"})," and ",(0,r.jsx)(n.code,{children:"[\"{Symbol('a')\"]"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"{}"})," and ",(0,r.jsx)(n.code,{children:"[]"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'{ a: "b" }'})," and ",(0,r.jsx)(n.code,{children:'["a"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"{Symbol('a'): 'b'}"})," and ",(0,r.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-3",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["A Symbol is not ",(0,r.jsx)(n.em,{children:"enumerable"}),". The Object.keys method returns all ",(0,r.jsx)(n.em,{children:"enumerable"})," key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones."]}),(0,r.jsxs)(n.p,{children:['This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also "hide" properties on objects this way (although not entirely. You can still access symbols using the ',(0,r.jsx)(n.code,{children:"Object.getOwnPropertySymbols()"})," method)."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"98-whats-the-output",children:"98. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const getList = ([x, ...y]) => [x, y]\nconst getUser = user => { name: user.name, age: user.age }\n\nconst list = [1, 2, 3, 4]\nconst user = { name: "Lydia", age: 21 }\n\nconsole.log(getList(list))\nconsole.log(getUser(user))\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"[1, [2, 3, 4]]"})," and ",(0,r.jsx)(n.code,{children:"SyntaxError"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"[1, [2, 3, 4]]"})," and ",(0,r.jsx)(n.code,{children:'{ name: "Lydia", age: 21 }'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4]"})," and ",(0,r.jsx)(n.code,{children:'{ name: "Lydia", age: 21 }'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Error"})," and ",(0,r.jsx)(n.code,{children:'{ name: "Lydia", age: 21 }'})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a-1",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getList"})," function receives an array as its argument. Between the parentheses of the ",(0,r.jsx)(n.code,{children:"getList"})," function, we destructure this array right away. You could see this as:"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"[x, ...y] = [1, 2, 3, 4]"})}),(0,r.jsxs)(n.p,{children:["With the rest parameter ",(0,r.jsx)(n.code,{children:"...y"}),', we put all "remaining" arguments in an array. The remaining arguments are ',(0,r.jsx)(n.code,{children:"2"}),", ",(0,r.jsx)(n.code,{children:"3"})," and ",(0,r.jsx)(n.code,{children:"4"})," in this case. The value of ",(0,r.jsx)(n.code,{children:"y"})," is an array, containing all the rest parameters. The value of ",(0,r.jsx)(n.code,{children:"x"})," is equal to ",(0,r.jsx)(n.code,{children:"1"})," in this case, so when we log ",(0,r.jsx)(n.code,{children:"[x, y]"}),", ",(0,r.jsx)(n.code,{children:"[1, [2, 3, 4]]"})," gets logged."]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getUser"})," function receives an object. With arrow functions, we don't ",(0,r.jsx)(n.em,{children:"have"})," to write curly brackets if we just return one value. However, if you want to instantly return an ",(0,r.jsx)(n.em,{children:"object"})," from an arrow function, you have to write it between parentheses, otherwise everything between the two braces will be interpreted as a block statement. In this case the code between the braces is not a valid JavaScript code, so a ",(0,r.jsx)(n.code,{children:"SyntaxError"})," gets thrown."]}),(0,r.jsx)(n.p,{children:"The following function would have returned an object:"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"const getUser = user => ({ name: user.name, age: user.age })"})})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"99-whats-the-output",children:"99. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const name = 'Lydia';\n\nconsole.log(name());\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"SyntaxError"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"ReferenceError"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"TypeError"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:["The variable ",(0,r.jsx)(n.code,{children:"name"})," holds the value of a string, which is not a function, thus cannot invoke."]}),(0,r.jsxs)(n.p,{children:["TypeErrors get thrown when a value is not of the expected type. JavaScript expected ",(0,r.jsx)(n.code,{children:"name"})," to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!"]}),(0,r.jsxs)(n.p,{children:["SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word ",(0,r.jsx)(n.code,{children:"return"})," as ",(0,r.jsx)(n.code,{children:"retrun"}),".\nReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"100-whats-the-value-of-output",children:"100. What's the value of output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \ud83c\udf89\u2728 This is my 100th question! \u2728\ud83c\udf89\n\nconst output = `${[] && 'Im'}possible!\nYou should${'' && `n't`} see a therapist after so much JavaScript lol`;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"possible! You should see a therapist after so much JavaScript lol"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"Impossible! You should see a therapist after so much JavaScript lol"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"possible! You shouldn't see a therapist after so much JavaScript lol"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Impossible! You shouldn't see a therapist after so much JavaScript lol"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b-2",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"[]"})," is a truthy value. With the ",(0,r.jsx)(n.code,{children:"&&"})," operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value ",(0,r.jsx)(n.code,{children:"[]"})," is a truthy value, so ",(0,r.jsx)(n.code,{children:"\"Im'"})," gets returned."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'""'})," is a falsy value. If the left-hand value is falsy, nothing gets returned. ",(0,r.jsx)(n.code,{children:"n't"})," doesn't get returned."]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},75251:(e,n,s)=>{var r=s(67294),t=Symbol.for("react.element"),i=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,s){var r,i={},l=null,d=null;for(r in void 0!==s&&(l=""+s),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(d=n.ref),n)c.call(n,r)&&!o.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:t,type:e,key:l,ref:d,props:i,_owner:a.current}}n.Fragment=i,n.jsx=l,n.jsxs=l},85893:(e,n,s)=>{e.exports=s(75251)},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>c});var r=s(67294);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);