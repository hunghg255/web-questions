/*! For license information please see 3220674d.8eaac5e2.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[8516],{19271:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var r=n(85893),i=n(11151);const t={sidebar_position:11,title:"Question 101 - 110",comment:!0,tags:["Javascript"]},c=void 0,o={id:"javascripts/question-11",title:"Question 101 - 110",description:"101. What's the value of output?",source:"@site/questions/javascripts/question-11.md",sourceDirName:"javascripts",slug:"/javascripts/question-11",permalink:"/questions/javascripts/question-11",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/questions/javascripts/question-11.md",tags:[{label:"Javascript",permalink:"/questions/tags/javascript"}],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Question 101 - 110",comment:!0,tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Question 91 - 100",permalink:"/questions/javascripts/question-10"},next:{title:"Question 111 - 120",permalink:"/questions/javascripts/question-12"}},l={},d=[{value:"101. What&#39;s the value of output?",id:"101-whats-the-value-of-output",level:3},{value:"Answer: C",id:"answer-c",level:4},{value:"102. What&#39;s the value of output?",id:"102-whats-the-value-of-output",level:3},{value:"Answer: D",id:"answer-d",level:4},{value:"103. What&#39;s the value of output?",id:"103-whats-the-value-of-output",level:3},{value:"Answer: C",id:"answer-c-1",level:4},{value:"104. What&#39;s its value?",id:"104-whats-its-value",level:3},{value:"Answer: C",id:"answer-c-2",level:4},{value:"105. What&#39;s its value?",id:"105-whats-its-value",level:3},{value:"Answer: B",id:"answer-b",level:4},{value:"106. What&#39;s its value?",id:"106-whats-its-value",level:3},{value:"Answer: D",id:"answer-d-1",level:4},{value:"107. What&#39;s its value?",id:"107-whats-its-value",level:3},{value:"Answer: A",id:"answer-a",level:4},{value:"108. Which of these methods modifies the original array?",id:"108-which-of-these-methods-modifies-the-original-array",level:3},{value:"Answer: D",id:"answer-d-2",level:4},{value:"109. What&#39;s the output?",id:"109-whats-the-output",level:3},{value:"Answer: A",id:"answer-a-1",level:4},{value:"110. What does this method do?",id:"110-what-does-this-method-do",level:3},{value:"Answer: A",id:"answer-a-2",level:4}];function a(e){const s={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h3,{id:"101-whats-the-value-of-output",children:"101. What's the value of output?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const one = false || {} || null;\nconst two = null || false || '';\nconst three = [] || 0 || true;\n\nconsole.log(one, two, three);\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"false"})," ",(0,r.jsx)(s.code,{children:"null"})," ",(0,r.jsx)(s.code,{children:"[]"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"null"})," ",(0,r.jsx)(s.code,{children:'""'})," ",(0,r.jsx)(s.code,{children:"true"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"{}"})," ",(0,r.jsx)(s.code,{children:'""'})," ",(0,r.jsx)(s.code,{children:"[]"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"null"})," ",(0,r.jsx)(s.code,{children:"null"})," ",(0,r.jsx)(s.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-c",children:"Answer: C"}),(0,r.jsxs)(s.p,{children:["With the ",(0,r.jsx)(s.code,{children:"||"})," operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned."]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"(false || {} || null)"}),": the empty object ",(0,r.jsx)(s.code,{children:"{}"})," is a truthy value. This is the first (and only) truthy value, which gets returned. ",(0,r.jsx)(s.code,{children:"one"})," is equal to ",(0,r.jsx)(s.code,{children:"{}"}),"."]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:'(null || false || "")'}),": all operands are falsy values. This means that the last operand, ",(0,r.jsx)(s.code,{children:'""'})," gets returned. ",(0,r.jsx)(s.code,{children:"two"})," is equal to ",(0,r.jsx)(s.code,{children:'""'}),"."]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:'([] || 0 || "")'}),": the empty array",(0,r.jsx)(s.code,{children:"[]"})," is a truthy value. This is the first truthy value, which gets returned. ",(0,r.jsx)(s.code,{children:"three"})," is equal to ",(0,r.jsx)(s.code,{children:"[]"}),"."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"102-whats-the-value-of-output",children:"102. What's the value of output?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const myPromise = () => Promise.resolve('I have resolved!');\n\nfunction firstFunction() {\n  myPromise().then((res) => console.log(res));\n  console.log('second');\n}\n\nasync function secondFunction() {\n  console.log(await myPromise());\n  console.log('second');\n}\n\nfirstFunction();\nsecondFunction();\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"I have resolved!"}),", ",(0,r.jsx)(s.code,{children:"second"})," and ",(0,r.jsx)(s.code,{children:"I have resolved!"}),", ",(0,r.jsx)(s.code,{children:"second"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"second"}),", ",(0,r.jsx)(s.code,{children:"I have resolved!"})," and ",(0,r.jsx)(s.code,{children:"second"}),", ",(0,r.jsx)(s.code,{children:"I have resolved!"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"I have resolved!"}),", ",(0,r.jsx)(s.code,{children:"second"})," and ",(0,r.jsx)(s.code,{children:"second"}),", ",(0,r.jsx)(s.code,{children:"I have resolved!"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"second"}),", ",(0,r.jsx)(s.code,{children:"I have resolved!"})," and ",(0,r.jsx)(s.code,{children:"I have resolved!"}),", ",(0,r.jsx)(s.code,{children:"second"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-d",children:"Answer: D"}),(0,r.jsxs)(s.p,{children:["With a promise, we basically say ",(0,r.jsx)(s.em,{children:"I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value."})]}),(0,r.jsxs)(s.p,{children:["We can get this value with both ",(0,r.jsx)(s.code,{children:".then"})," and the ",(0,r.jsx)(s.code,{children:"await"})," keyword in an ",(0,r.jsx)(s.code,{children:"async"})," function. Although we can get a promise's value with both ",(0,r.jsx)(s.code,{children:".then"})," and ",(0,r.jsx)(s.code,{children:"await"}),", they work a bit differently."]}),(0,r.jsxs)(s.p,{children:["In the ",(0,r.jsx)(s.code,{children:"firstFunction"}),", we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is ",(0,r.jsx)(s.code,{children:"console.log('second')"})," in this case. Then, the function resolved with the string ",(0,r.jsx)(s.code,{children:"I have resolved"}),", which then got logged after it saw that the callstack was empty."]}),(0,r.jsxs)(s.p,{children:["With the await keyword in ",(0,r.jsx)(s.code,{children:"secondFunction"}),", we literally pause the execution of an async function until the value has been resolved before moving to the next line."]}),(0,r.jsxs)(s.p,{children:["This means that it waited for the ",(0,r.jsx)(s.code,{children:"myPromise"})," to resolve with the value ",(0,r.jsx)(s.code,{children:"I have resolved"}),", and only once that happened, we moved to the next line: ",(0,r.jsx)(s.code,{children:"second"})," got logged."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"103-whats-the-value-of-output",children:"103. What's the value of output?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const set = new Set();\n\nset.add(1);\nset.add('Lydia');\nset.add({ name: 'Lydia' });\n\nfor (let item of set) {\n  console.log(item + 2);\n}\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"3"}),", ",(0,r.jsx)(s.code,{children:"NaN"}),", ",(0,r.jsx)(s.code,{children:"NaN"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"3"}),", ",(0,r.jsx)(s.code,{children:"7"}),", ",(0,r.jsx)(s.code,{children:"NaN"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"3"}),", ",(0,r.jsx)(s.code,{children:"Lydia2"}),", ",(0,r.jsx)(s.code,{children:"[object Object]2"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:'"12"'}),", ",(0,r.jsx)(s.code,{children:"Lydia2"}),", ",(0,r.jsx)(s.code,{children:"[object Object]2"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-c-1",children:"Answer: C"}),(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"+"})," operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string."]}),(0,r.jsxs)(s.p,{children:["The first one is ",(0,r.jsx)(s.code,{children:"1"}),", which is a numerical value. ",(0,r.jsx)(s.code,{children:"1 + 2"})," returns the number 3."]}),(0,r.jsxs)(s.p,{children:["However, the second one is a string ",(0,r.jsx)(s.code,{children:'"Lydia"'}),". ",(0,r.jsx)(s.code,{children:'"Lydia"'})," is a string and ",(0,r.jsx)(s.code,{children:"2"})," is a number: ",(0,r.jsx)(s.code,{children:"2"})," gets coerced into a string. ",(0,r.jsx)(s.code,{children:'"Lydia"'})," and ",(0,r.jsx)(s.code,{children:'"2"'})," get concatenated, which results in the string ",(0,r.jsx)(s.code,{children:'"Lydia2"'}),"."]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:'{ name: "Lydia" }'})," is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes ",(0,r.jsx)(s.code,{children:'"[object Object]"'}),". ",(0,r.jsx)(s.code,{children:'"[object Object]"'})," concatenated with ",(0,r.jsx)(s.code,{children:'"2"'})," becomes ",(0,r.jsx)(s.code,{children:'"[object Object]2"'}),"."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"104-whats-its-value",children:"104. What's its value?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"Promise.resolve(5);\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"5"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"Promise {<pending>: 5}"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"Promise {<fulfilled>: 5}"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"Error"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-c-2",children:"Answer: C"}),(0,r.jsxs)(s.p,{children:["We can pass any type of value we want to ",(0,r.jsx)(s.code,{children:"Promise.resolve"}),", either a promise or a non-promise. The method itself returns a promise with the resolved value (",(0,r.jsx)(s.code,{children:"<fulfilled>"}),"). If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise."]}),(0,r.jsxs)(s.p,{children:["In this case, we just passed the numerical value ",(0,r.jsx)(s.code,{children:"5"}),". It returns a resolved promise with the value ",(0,r.jsx)(s.code,{children:"5"}),"."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"105-whats-its-value",children:"105. What's its value?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"function compareMembers(person1, person2 = person) {\n  if (person1 !== person2) {\n    console.log('Not the same!');\n  } else {\n    console.log('They are the same!');\n  }\n}\n\nconst person = { name: 'Lydia' };\n\ncompareMembers(person);\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"Not the same!"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"They are the same!"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"ReferenceError"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"SyntaxError"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-b",children:"Answer: B"}),(0,r.jsxs)(s.p,{children:["Objects are passed by reference. When we check objects for strict equality (",(0,r.jsx)(s.code,{children:"==="}),"), we're comparing their references."]}),(0,r.jsxs)(s.p,{children:["We set the default value for ",(0,r.jsx)(s.code,{children:"person2"})," equal to the ",(0,r.jsx)(s.code,{children:"person"})," object, and passed the ",(0,r.jsx)(s.code,{children:"person"})," object as the value for ",(0,r.jsx)(s.code,{children:"person1"}),"."]}),(0,r.jsx)(s.p,{children:"This means that both values have a reference to the same spot in memory, thus they are equal."}),(0,r.jsxs)(s.p,{children:["The code block in the ",(0,r.jsx)(s.code,{children:"else"})," statement gets run, and ",(0,r.jsx)(s.code,{children:"They are the same!"})," gets logged."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"106-whats-its-value",children:"106. What's its value?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const colorConfig = {\n  red: true,\n  blue: false,\n  green: true,\n  black: true,\n  yellow: false,\n};\n\nconst colors = ['pink', 'red', 'blue'];\n\nconsole.log(colorConfig.colors[1]);\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"true"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"false"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"TypeError"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-d-1",children:"Answer: D"}),(0,r.jsxs)(s.p,{children:["In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (",(0,r.jsx)(s.code,{children:"colorConfig.colors"}),") instead of bracket notation (",(0,r.jsx)(s.code,{children:'colorConfig["colors"]'}),")."]}),(0,r.jsxs)(s.p,{children:["With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called ",(0,r.jsx)(s.code,{children:"colors"})," on the ",(0,r.jsx)(s.code,{children:"colorConfig"})," object. There is no property called ",(0,r.jsx)(s.code,{children:"colors"}),", so this returns ",(0,r.jsx)(s.code,{children:"undefined"}),". Then, we try to access the value of the first element by using ",(0,r.jsx)(s.code,{children:"[1]"}),". We cannot do this on a value that's ",(0,r.jsx)(s.code,{children:"undefined"}),", so it throws a ",(0,r.jsx)(s.code,{children:"TypeError"}),": ",(0,r.jsx)(s.code,{children:"Cannot read property '1' of undefined"}),"."]}),(0,r.jsxs)(s.p,{children:["JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket ",(0,r.jsx)(s.code,{children:"["})," and keeps going until it finds the closing bracket ",(0,r.jsx)(s.code,{children:"]"}),". Only then, it will evaluate the statement. If we would've used ",(0,r.jsx)(s.code,{children:"colorConfig[colors[1]]"}),", it would have returned the value of the ",(0,r.jsx)(s.code,{children:"red"})," property on the ",(0,r.jsx)(s.code,{children:"colorConfig"})," object."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"107-whats-its-value",children:"107. What's its value?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"console.log('\u2764\ufe0f' === '\u2764\ufe0f');\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"true"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"false"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-a",children:"Answer: A"}),(0,r.jsxs)(s.p,{children:["Under the hood, emojis are unicodes. The unicodes for the heart emoji is ",(0,r.jsx)(s.code,{children:'"U+2764 U+FE0F"'}),". These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"108-which-of-these-methods-modifies-the-original-array",children:"108. Which of these methods modifies the original array?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const emojis = ['\u2728', '\ud83e\udd51', '\ud83d\ude0d'];\n\nemojis.map((x) => x + '\u2728');\nemojis.filter((x) => x !== '\ud83e\udd51');\nemojis.find((x) => x !== '\ud83e\udd51');\nemojis.reduce((acc, cur) => acc + '\u2728');\nemojis.slice(1, 2, '\u2728');\nemojis.splice(1, 2, '\u2728');\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"All of them"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"map"})," ",(0,r.jsx)(s.code,{children:"reduce"})," ",(0,r.jsx)(s.code,{children:"slice"})," ",(0,r.jsx)(s.code,{children:"splice"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"map"})," ",(0,r.jsx)(s.code,{children:"slice"})," ",(0,r.jsx)(s.code,{children:"splice"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"splice"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-d-2",children:"Answer: D"}),(0,r.jsxs)(s.p,{children:["With ",(0,r.jsx)(s.code,{children:"splice"})," method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed ",(0,r.jsx)(s.code,{children:"'\ud83e\udd51'"})," and ",(0,r.jsx)(s.code,{children:"'\ud83d\ude0d'"}),") and added the \u2728 emoji instead."]}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"map"}),", ",(0,r.jsx)(s.code,{children:"filter"})," and ",(0,r.jsx)(s.code,{children:"slice"})," return a new array, ",(0,r.jsx)(s.code,{children:"find"})," returns an element, and ",(0,r.jsx)(s.code,{children:"reduce"})," returns a reduced value."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"109-whats-the-output",children:"109. What's the output?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"const food = ['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54'];\nconst info = { favoriteFood: food[0] };\n\ninfo.favoriteFood = '\ud83c\udf5d';\n\nconsole.log(food);\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["A: ",(0,r.jsx)(s.code,{children:"['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']"})]}),"\n",(0,r.jsxs)(s.li,{children:["B: ",(0,r.jsx)(s.code,{children:"['\ud83c\udf5d', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']"})]}),"\n",(0,r.jsxs)(s.li,{children:["C: ",(0,r.jsx)(s.code,{children:"['\ud83c\udf5d', '\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']"})]}),"\n",(0,r.jsxs)(s.li,{children:["D: ",(0,r.jsx)(s.code,{children:"ReferenceError"})]}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-a-1",children:"Answer: A"}),(0,r.jsxs)(s.p,{children:["We set the value of the ",(0,r.jsx)(s.code,{children:"favoriteFood"})," property on the ",(0,r.jsx)(s.code,{children:"info"})," object equal to the string with the pizza emoji, ",(0,r.jsx)(s.code,{children:"'\ud83c\udf55'"}),". A string is a primitive data type. In JavaScript, primitive data types don't interact by reference."]}),(0,r.jsxs)(s.p,{children:["In JavaScript, primitive data types (everything that's not an object) interact by ",(0,r.jsx)(s.em,{children:"value"}),". In this case, we set the value of the ",(0,r.jsx)(s.code,{children:"favoriteFood"})," property on the ",(0,r.jsx)(s.code,{children:"info"})," object equal to the value of the first element in the ",(0,r.jsx)(s.code,{children:"food"})," array, the string with the pizza emoji in this case (",(0,r.jsx)(s.code,{children:"'\ud83c\udf55'"}),"). A string is a primitive data type, and interact by value (see my ",(0,r.jsx)(s.a,{href:"https://www.theavocoder.com/complete-javascript/2018/12/21/by-value-vs-by-reference",children:"blogpost"})," if you're interested in learning more)"]}),(0,r.jsxs)(s.p,{children:["Then, we change the value of the ",(0,r.jsx)(s.code,{children:"favoriteFood"})," property on the ",(0,r.jsx)(s.code,{children:"info"})," object. The ",(0,r.jsx)(s.code,{children:"food"})," array hasn't changed, since the value of ",(0,r.jsx)(s.code,{children:"favoriteFood"})," was merely a ",(0,r.jsx)(s.em,{children:"copy"})," of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on ",(0,r.jsx)(s.code,{children:"food[0]"}),". When we log food, it's still the original array, ",(0,r.jsx)(s.code,{children:"['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']"}),"."]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"110-what-does-this-method-do",children:"110. What does this method do?"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"JSON.parse();\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"A: Parses JSON to a JavaScript value"}),"\n",(0,r.jsx)(s.li,{children:"B: Parses a JavaScript object to JSON"}),"\n",(0,r.jsx)(s.li,{children:"C: Parses any JavaScript value to JSON"}),"\n",(0,r.jsx)(s.li,{children:"D: Parses JSON to a JavaScript object only"}),"\n"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(s.h4,{id:"answer-a-2",children:"Answer: A"}),(0,r.jsxs)(s.p,{children:["With the ",(0,r.jsx)(s.code,{children:"JSON.parse()"})," method, we can parse JSON string to a JavaScript value."]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonNumber = JSON.stringify(4); // '4'\nJSON.parse(jsonNumber); // 4\n\n// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify([1, 2, 3]); // '[1, 2, 3]'\nJSON.parse(jsonArray); // [1, 2, 3]\n\n// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify({ name: 'Lydia' }); // '{\"name\":\"Lydia\"}'\nJSON.parse(jsonArray); // { name: 'Lydia' }\n"})})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},75251:(e,s,n)=>{var r=n(67294),i=Symbol.for("react.element"),t=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function d(e,s,n){var r,t={},d=null,a=null;for(r in void 0!==n&&(d=""+n),void 0!==s.key&&(d=""+s.key),void 0!==s.ref&&(a=s.ref),s)c.call(s,r)&&!l.hasOwnProperty(r)&&(t[r]=s[r]);if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===t[r]&&(t[r]=s[r]);return{$$typeof:i,type:e,key:d,ref:a,props:t,_owner:o.current}}s.Fragment=t,s.jsx=d,s.jsxs=d},85893:(e,s,n)=>{e.exports=n(75251)},11151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>c});var r=n(67294);const i={},t=r.createContext(i);function c(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);