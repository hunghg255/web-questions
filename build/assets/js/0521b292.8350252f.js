/*! For license information please see 0521b292.8350252f.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[1235],{99564:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>a,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var r=s(85893),i=s(11151);const c={sidebar_position:13,title:"Question 121 - 130",comment:!0,tags:["Javascript"]},d=void 0,l={id:"javascripts/question-13",title:"Question 121 - 130",description:"121. What's the output?",source:"@site/questions/javascripts/question-13.md",sourceDirName:"javascripts",slug:"/javascripts/question-13",permalink:"/questions/javascripts/question-13",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/questions/javascripts/question-13.md",tags:[{label:"Javascript",permalink:"/questions/tags/javascript"}],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,title:"Question 121 - 130",comment:!0,tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Question 111 - 120",permalink:"/questions/javascripts/question-12"},next:{title:"Question 131 - 140",permalink:"/questions/javascripts/question-14"}},t={},o=[{value:"121. What&#39;s the output?",id:"121-whats-the-output",level:3},{value:"Answer: D",id:"answer-d",level:4},{value:"122. What&#39;s the output?",id:"122-whats-the-output",level:6},{value:"Answer: C",id:"answer-c",level:4},{value:"123. What&#39;s the output?",id:"123-whats-the-output",level:6},{value:"Answer: A",id:"answer-a",level:4},{value:"124. What&#39;s the output?",id:"124-whats-the-output",level:6},{value:"Answer: C",id:"answer-c-1",level:4},{value:"125. What&#39;s the output?",id:"125-whats-the-output",level:6},{value:"Answer: D",id:"answer-d-1",level:4},{value:"126. What&#39;s the output?",id:"126-whats-the-output",level:6},{value:"Answer: B",id:"answer-b",level:4},{value:"127. What&#39;s the output?",id:"127-whats-the-output",level:6},{value:"Answer: B",id:"answer-b-1",level:4},{value:"128. What&#39;s the output?",id:"128-whats-the-output",level:6},{value:"Answer: C",id:"answer-c-2",level:4},{value:"129. What&#39;s the output?",id:"129-whats-the-output",level:6},{value:"Answer: D",id:"answer-d-2",level:4},{value:"130. What&#39;s the output?",id:"130-whats-the-output",level:6},{value:"Answer: C",id:"answer-c-3",level:4}];function h(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",h6:"h6",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"121-whats-the-output",children:"121. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const config = {\n  languages: [],\n  set language(lang) {\n    return this.languages.push(lang);\n  },\n};\n\nconsole.log(config.language);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"function language(lang) { this.languages.push(lang }"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"0"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"[]"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"language"})," method is a ",(0,r.jsx)(n.code,{children:"setter"}),". Setters don't hold an actual value, their purpose is to ",(0,r.jsx)(n.em,{children:"modify"})," properties. When calling a ",(0,r.jsx)(n.code,{children:"setter"})," method, ",(0,r.jsx)(n.code,{children:"undefined"})," gets returned."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"122-whats-the-output",children:"122. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const name = 'Lydia Hallie';\n\nconsole.log(!typeof name === 'object');\nconsole.log(!typeof name === 'string');\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"typeof name"})," returns ",(0,r.jsx)(n.code,{children:'"string"'}),". The string ",(0,r.jsx)(n.code,{children:'"string"'})," is a truthy value, so ",(0,r.jsx)(n.code,{children:"!typeof name"})," returns the boolean value ",(0,r.jsx)(n.code,{children:"false"}),". ",(0,r.jsx)(n.code,{children:'false === "object"'})," and ",(0,r.jsx)(n.code,{children:'false === "string"'})," both return",(0,r.jsx)(n.code,{children:"false"}),"."]}),(0,r.jsxs)(n.p,{children:["(If we wanted to check whether the type was (un)equal to a certain type, we should've written ",(0,r.jsx)(n.code,{children:"!=="})," instead of ",(0,r.jsx)(n.code,{children:"!typeof"}),")"]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"123-whats-the-output",children:"123. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const add = (x) => (y) => (z) => {\n  console.log(x, y, z);\n  return x + y + z;\n};\n\nadd(4)(5)(6);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"4"})," ",(0,r.jsx)(n.code,{children:"5"})," ",(0,r.jsx)(n.code,{children:"6"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"6"})," ",(0,r.jsx)(n.code,{children:"5"})," ",(0,r.jsx)(n.code,{children:"4"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"4"})," ",(0,r.jsx)(n.code,{children:"function"})," ",(0,r.jsx)(n.code,{children:"function"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"6"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"add"})," function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument ",(0,r.jsx)(n.code,{children:"x"})," with the value of ",(0,r.jsx)(n.code,{children:"4"}),". We invoke the second function, which receives an argument ",(0,r.jsx)(n.code,{children:"y"})," with the value ",(0,r.jsx)(n.code,{children:"5"}),". Then we invoke the third function, which receives an argument ",(0,r.jsx)(n.code,{children:"z"})," with the value ",(0,r.jsx)(n.code,{children:"6"}),". When we're trying to access the value ",(0,r.jsx)(n.code,{children:"x"}),", ",(0,r.jsx)(n.code,{children:"y"})," and ",(0,r.jsx)(n.code,{children:"z"})," within the last arrow function, the JS engine goes up the scope chain in order to find the values for ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," accordingly. This returns ",(0,r.jsx)(n.code,{children:"4"})," ",(0,r.jsx)(n.code,{children:"5"})," ",(0,r.jsx)(n.code,{children:"6"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"124-whats-the-output",children:"124. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"async function* range(start, end) {\n  for (let i = start; i <= end; i++) {\n    yield Promise.resolve(i);\n  }\n}\n\n(async () => {\n  const gen = range(1, 3);\n  for await (const item of gen) {\n    console.log(item);\n  }\n})();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"Promise {1}"})," ",(0,r.jsx)(n.code,{children:"Promise {2}"})," ",(0,r.jsx)(n.code,{children:"Promise {3}"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"Promise {<pending>}"})," ",(0,r.jsx)(n.code,{children:"Promise {<pending>}"})," ",(0,r.jsx)(n.code,{children:"Promise {<pending>}"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"1"})," ",(0,r.jsx)(n.code,{children:"2"})," ",(0,r.jsx)(n.code,{children:"3"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c-1",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:["The generator function ",(0,r.jsx)(n.code,{children:"range"})," returns an async object with promises for each item in the range we pass: ",(0,r.jsx)(n.code,{children:"Promise{1}"}),", ",(0,r.jsx)(n.code,{children:"Promise{2}"}),", ",(0,r.jsx)(n.code,{children:"Promise{3}"}),". We set the variable ",(0,r.jsx)(n.code,{children:"gen"})," equal to the async object, after which we loop over it using a ",(0,r.jsx)(n.code,{children:"for await ... of"})," loop. We set the variable ",(0,r.jsx)(n.code,{children:"item"})," equal to the returned Promise values: first ",(0,r.jsx)(n.code,{children:"Promise{1}"}),", then ",(0,r.jsx)(n.code,{children:"Promise{2}"}),", then ",(0,r.jsx)(n.code,{children:"Promise{3}"}),". Since we're ",(0,r.jsx)(n.em,{children:"awaiting"})," the value of ",(0,r.jsx)(n.code,{children:"item"}),", the resolved promise, the resolved ",(0,r.jsx)(n.em,{children:"values"})," of the promises get returned: ",(0,r.jsx)(n.code,{children:"1"}),", ",(0,r.jsx)(n.code,{children:"2"}),", then ",(0,r.jsx)(n.code,{children:"3"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"125-whats-the-output",children:"125. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const myFunc = ({ x, y, z }) => {\n  console.log(x, y, z);\n};\n\nmyFunc(1, 2, 3);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"1"})," ",(0,r.jsx)(n.code,{children:"2"})," ",(0,r.jsx)(n.code,{children:"3"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"{1: 1}"})," ",(0,r.jsx)(n.code,{children:"{2: 2}"})," ",(0,r.jsx)(n.code,{children:"{3: 3}"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"{ 1: undefined }"})," ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-1",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"myFunc"})," expects an object with properties ",(0,r.jsx)(n.code,{children:"x"}),", ",(0,r.jsx)(n.code,{children:"y"})," and ",(0,r.jsx)(n.code,{children:"z"})," as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties ",(0,r.jsx)(n.code,{children:"x"}),", ",(0,r.jsx)(n.code,{children:"y"})," and ",(0,r.jsx)(n.code,{children:"z"})," ",(0,r.jsx)(n.code,{children:"({x: 1, y: 2, z: 3})"}),", ",(0,r.jsx)(n.code,{children:"x"}),", ",(0,r.jsx)(n.code,{children:"y"})," and ",(0,r.jsx)(n.code,{children:"z"})," have their default value of ",(0,r.jsx)(n.code,{children:"undefined"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"126-whats-the-output",children:"126. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function getFine(speed, amount) {\n  const formattedSpeed = new Intl.NumberFormat('en-US', {\n    style: 'unit',\n    unit: 'mile-per-hour',\n  }).format(speed);\n\n  const formattedAmount = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n\n  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`;\n}\n\nconsole.log(getFine(130, 300));\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A: The driver drove 130 and has to pay 300"}),"\n",(0,r.jsx)(n.li,{children:"B: The driver drove 130 mph and has to pay $300.00"}),"\n",(0,r.jsx)(n.li,{children:"C: The driver drove undefined and has to pay undefined"}),"\n",(0,r.jsx)(n.li,{children:"D: The driver drove 130.00 and has to pay 300.00"}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"Intl.NumberFormat"})," method, we can format numeric values to any locale. We format the numeric value ",(0,r.jsx)(n.code,{children:"130"})," to the ",(0,r.jsx)(n.code,{children:"en-US"})," locale as a ",(0,r.jsx)(n.code,{children:"unit"})," in ",(0,r.jsx)(n.code,{children:"mile-per-hour"}),", which results in ",(0,r.jsx)(n.code,{children:"130 mph"}),". The numeric value ",(0,r.jsx)(n.code,{children:"300"})," to the ",(0,r.jsx)(n.code,{children:"en-US"})," locale as a ",(0,r.jsx)(n.code,{children:"currency"})," in ",(0,r.jsx)(n.code,{children:"USD"})," results in ",(0,r.jsx)(n.code,{children:"$300.00"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"127-whats-the-output",children:"127. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const spookyItems = ['\ud83d\udc7b', '\ud83c\udf83', '\ud83d\udd78'];\n({ item: spookyItems[3] } = { item: '\ud83d\udc80' });\n\nconsole.log(spookyItems);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'["\ud83d\udc7b", "\ud83c\udf83", "\ud83d\udd78"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'["\ud83d\udc7b", "\ud83c\udf83", "\ud83d\udd78", "\ud83d\udc80"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'["\ud83d\udc7b", "\ud83c\udf83", "\ud83d\udd78", { item: "\ud83d\udc80" }]'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:'["\ud83d\udc7b", "\ud83c\udf83", "\ud83d\udd78", "[object Object]"]'})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b-1",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:['By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we\'re assigning the value "\ud83d\udc80" to ',(0,r.jsx)(n.code,{children:"spookyItems[3]"}),". This means that we're modifying the ",(0,r.jsx)(n.code,{children:"spookyItems"}),' array, we\'re adding the "\ud83d\udc80" to it. When logging ',(0,r.jsx)(n.code,{children:"spookyItems"}),", ",(0,r.jsx)(n.code,{children:'["\ud83d\udc7b", "\ud83c\udf83", "\ud83d\udd78", "\ud83d\udc80"]'})," gets logged."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"128-whats-the-output",children:"128. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const name = 'Lydia Hallie';\nconst age = 21;\n\nconsole.log(Number.isNaN(name));\nconsole.log(Number.isNaN(age));\n\nconsole.log(isNaN(name));\nconsole.log(isNaN(age));\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"true"})," ",(0,r.jsx)(n.code,{children:"false"})," ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c-2",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"Number.isNaN"})," method, you can check if the value you pass is a ",(0,r.jsx)(n.em,{children:"numeric value"})," and equal to ",(0,r.jsx)(n.code,{children:"NaN"}),". ",(0,r.jsx)(n.code,{children:"name"})," is not a numeric value, so ",(0,r.jsx)(n.code,{children:"Number.isNaN(name)"})," returns ",(0,r.jsx)(n.code,{children:"false"}),". ",(0,r.jsx)(n.code,{children:"age"})," is a numeric value, but is not equal to ",(0,r.jsx)(n.code,{children:"NaN"}),", so ",(0,r.jsx)(n.code,{children:"Number.isNaN(age)"})," returns ",(0,r.jsx)(n.code,{children:"false"}),"."]}),(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"isNaN"})," method, you can check if the value you pass is not a number. ",(0,r.jsx)(n.code,{children:"name"})," is not a number, so ",(0,r.jsx)(n.code,{children:"isNaN(name)"})," returns true. ",(0,r.jsx)(n.code,{children:"age"})," is a number, so ",(0,r.jsx)(n.code,{children:"isNaN(age)"})," returns ",(0,r.jsx)(n.code,{children:"false"}),"."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"129-whats-the-output",children:"129. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const randomValue = 21;\n\nfunction getInfo() {\n  console.log(typeof randomValue);\n  const randomValue = 'Lydia Hallie';\n}\n\ngetInfo();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'"number"'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"string"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"ReferenceError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-2",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["Variables declared with the ",(0,r.jsx)(n.code,{children:"const"})," keyword are not referenceable before their initialization: this is called the ",(0,r.jsx)(n.em,{children:"temporal dead zone"}),". In the ",(0,r.jsx)(n.code,{children:"getInfo"})," function, the variable ",(0,r.jsx)(n.code,{children:"randomValue"})," is scoped in the functional scope of ",(0,r.jsx)(n.code,{children:"getInfo"}),". On the line where we want to log the value of ",(0,r.jsx)(n.code,{children:"typeof randomValue"}),", the variable ",(0,r.jsx)(n.code,{children:"randomValue"})," isn't initialized yet: a ",(0,r.jsx)(n.code,{children:"ReferenceError"})," gets thrown! The engine didn't go down the scope chain since we declared the variable ",(0,r.jsx)(n.code,{children:"randomValue"})," in the ",(0,r.jsx)(n.code,{children:"getInfo"})," function."]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h6,{id:"130-whats-the-output",children:"130. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const myPromise = Promise.resolve('Woah some cool data');\n\n(async () => {\n  try {\n    console.log(await myPromise);\n  } catch {\n    throw new Error(`Oops didn't work`);\n  } finally {\n    console.log('Oh finally!');\n  }\n})();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"Woah some cool data"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"Oh finally!"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"Woah some cool data"})," ",(0,r.jsx)(n.code,{children:"Oh finally!"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Oops didn't work"})," ",(0,r.jsx)(n.code,{children:"Oh finally!"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"\u0110\xe1p \xe1n"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c-3",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"try"})," block, we're logging the awaited value of the ",(0,r.jsx)(n.code,{children:"myPromise"})," variable: ",(0,r.jsx)(n.code,{children:'"Woah some cool data"'}),". Since no errors were thrown in the ",(0,r.jsx)(n.code,{children:"try"})," block, the code in the ",(0,r.jsx)(n.code,{children:"catch"})," block doesn't run. The code in the ",(0,r.jsx)(n.code,{children:"finally"})," block ",(0,r.jsx)(n.em,{children:"always"})," runs, ",(0,r.jsx)(n.code,{children:'"Oh finally!"'})," gets logged."]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},75251:(e,n,s)=>{var r=s(67294),i=Symbol.for("react.element"),c=Symbol.for("react.fragment"),d=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,t={key:!0,ref:!0,__self:!0,__source:!0};function o(e,n,s){var r,c={},o=null,h=null;for(r in void 0!==s&&(o=""+s),void 0!==n.key&&(o=""+n.key),void 0!==n.ref&&(h=n.ref),n)d.call(n,r)&&!t.hasOwnProperty(r)&&(c[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===c[r]&&(c[r]=n[r]);return{$$typeof:i,type:e,key:o,ref:h,props:c,_owner:l.current}}n.Fragment=c,n.jsx=o,n.jsxs=o},85893:(e,n,s)=>{e.exports=s(75251)},11151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>d});var r=s(67294);const i={},c=r.createContext(i);function d(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);