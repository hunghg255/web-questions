/*! For license information please see d081ba61.9a9290fc.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[887],{58255:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>a,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var i=s(85893),r=s(11151);const c={sidebar_position:14,title:"Question 131 - 140",comment:!0,tags:["Javascript"]},t=void 0,o={id:"javascripts/question-14",title:"Question 131 - 140",description:"131. What's the output?",source:"@site/questions/javascripts/question-14.md",sourceDirName:"javascripts",slug:"/javascripts/question-14",permalink:"/questions/javascripts/question-14",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/questions/javascripts/question-14.md",tags:[{label:"Javascript",permalink:"/questions/tags/javascript"}],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,title:"Question 131 - 140",comment:!0,tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Question 121 - 130",permalink:"/questions/javascripts/question-13"},next:{title:"Question 141 - 150",permalink:"/questions/javascripts/question-15"}},d={},l=[{value:"131. What&#39;s the output?",id:"131-whats-the-output",level:3},{value:"Answer: B",id:"answer-b",level:4},{value:"132. What&#39;s the output?",id:"132-whats-the-output",level:3},{value:"Answer: D",id:"answer-d",level:4},{value:"133. What&#39;s the output?",id:"133-whats-the-output",level:3},{value:"Answer: C",id:"answer-c",level:4},{value:"134. How can we invoke <code>sum</code> in <code>sum.js</code> from <code>index.js?</code>",id:"134-how-can-we-invoke-sum-in-sumjs-from-indexjs",level:3},{value:"Answer: C",id:"answer-c-1",level:4},{value:"135. What&#39;s the output?",id:"135-whats-the-output",level:3},{value:"Answer: C",id:"answer-c-2",level:4},{value:"136. Which of the following will modify the <code>person</code> object?",id:"136-which-of-the-following-will-modify-the-person-object",level:3},{value:"Answer: A",id:"answer-a",level:4},{value:"137. Which of the following will modify the <code>person</code> object?",id:"137-which-of-the-following-will-modify-the-person-object",level:3},{value:"Answer: C",id:"answer-c-3",level:4},{value:"138. What&#39;s the output?",id:"138-whats-the-output",level:3},{value:"Answer: A",id:"answer-a-1",level:4},{value:"139. What&#39;s the output?",id:"139-whats-the-output",level:3},{value:"Answer: D",id:"answer-d-1",level:4},{value:"140. What&#39;s missing?",id:"140-whats-missing",level:3},{value:"Answer: B",id:"answer-b-1",level:4}];function h(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"131-whats-the-output",children:"131. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const emojis = ['\ud83e\udd51', ['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]];\n\nconsole.log(emojis.flat(1));\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51', ['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]]"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51', '\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51', ['\u2728', '\u2728', '\ud83c\udf55', '\ud83c\udf55']]"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51', '\u2728', '\u2728', '\ud83c\udf55', '\ud83c\udf55']"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-b",children:"Answer: B"}),(0,i.jsxs)(n.p,{children:["With the ",(0,i.jsx)(n.code,{children:"flat"})," method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value ",(0,i.jsx)(n.code,{children:"1"})," (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51']"})," and ",(0,i.jsx)(n.code,{children:"['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]"})," in this case. Concatenating these two arrays results in ",(0,i.jsx)(n.code,{children:"['\ud83e\udd51', '\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]"}),"."]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"132-whats-the-output",children:"132. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class Counter {\n  constructor() {\n    this.count = 0;\n  }\n\n  increment() {\n    this.count++;\n  }\n}\n\nconst counterOne = new Counter();\ncounterOne.increment();\ncounterOne.increment();\n\nconst counterTwo = counterOne;\ncounterTwo.increment();\n\nconsole.log(counterOne.count);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"0"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"1"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"2"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"3"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-d",children:"Answer: D"}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"counterOne"})," is an instance of the ",(0,i.jsx)(n.code,{children:"Counter"})," class. The counter class contains a ",(0,i.jsx)(n.code,{children:"count"})," property on its constructor, and an ",(0,i.jsx)(n.code,{children:"increment"})," method. First, we invoked the ",(0,i.jsx)(n.code,{children:"increment"})," method twice by calling ",(0,i.jsx)(n.code,{children:"counterOne.increment()"}),". Currently, ",(0,i.jsx)(n.code,{children:"counterOne.count"})," is ",(0,i.jsx)(n.code,{children:"2"}),"."]}),(0,i.jsx)("img",{src:"https://i.imgur.com/KxLlTm9.png",width:"400"}),(0,i.jsxs)(n.p,{children:["Then, we create a new variable ",(0,i.jsx)(n.code,{children:"counterTwo"}),", and set it equal to ",(0,i.jsx)(n.code,{children:"counterOne"}),". Since objects interact by reference, we're just creating a new reference to the same spot in memory that ",(0,i.jsx)(n.code,{children:"counterOne"})," points to. Since it has the same spot in memory, any changes made to the object that ",(0,i.jsx)(n.code,{children:"counterTwo"})," has a reference to, also apply to ",(0,i.jsx)(n.code,{children:"counterOne"}),". Currently, ",(0,i.jsx)(n.code,{children:"counterTwo.count"})," is ",(0,i.jsx)(n.code,{children:"2"}),"."]}),(0,i.jsxs)(n.p,{children:["We invoke ",(0,i.jsx)(n.code,{children:"counterTwo.increment()"}),", which sets ",(0,i.jsx)(n.code,{children:"count"})," to ",(0,i.jsx)(n.code,{children:"3"}),". Then, we log the count on ",(0,i.jsx)(n.code,{children:"counterOne"}),", which logs ",(0,i.jsx)(n.code,{children:"3"}),"."]}),(0,i.jsx)("img",{src:"https://i.imgur.com/BNBHXmc.png",width:"400"})]})]}),"\n",(0,i.jsx)(n.h3,{id:"133-whats-the-output",children:"133. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const myPromise = Promise.resolve(Promise.resolve('Promise'));\n\nfunction funcOne() {\n  setTimeout(() => console.log('Timeout 1!'), 0);\n  myPromise.then((res) => res).then((res) => console.log(`${res} 1!`));\n  console.log('Last line 1!');\n}\n\nasync function funcTwo() {\n  const res = await myPromise;\n  console.log(`${res} 2!`);\n  setTimeout(() => console.log('Timeout 2!'), 0);\n  console.log('Last line 2!');\n}\n\nfuncOne();\nfuncTwo();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"Promise 1! Last line 1! Promise 2! Last line 2! Timeout 1! Timeout 2!"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"Last line 1! Timeout 1! Promise 1! Last line 2! Promise2! Timeout 2! "})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"Last line 1! Promise 2! Last line 2! Promise 1! Timeout 1! Timeout 2!"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"Timeout 1! Promise 1! Last line 1! Promise 2! Timeout 2! Last line 2!"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-c",children:"Answer: C"}),(0,i.jsxs)(n.p,{children:["First, we invoke ",(0,i.jsx)(n.code,{children:"funcOne"}),". On the first line of ",(0,i.jsx)(n.code,{children:"funcOne"}),", we call the ",(0,i.jsx)(n.em,{children:"asynchronous"})," ",(0,i.jsx)(n.code,{children:"setTimeout"})," function, from which the callback is sent to the Web API. (see my article on the event loop ",(0,i.jsx)("a",{href:"https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif",children:"here"}),".)"]}),(0,i.jsxs)(n.p,{children:["Then we call the ",(0,i.jsx)(n.code,{children:"myPromise"})," promise, which is an ",(0,i.jsx)(n.em,{children:"asynchronous"})," operation."]}),(0,i.jsxs)(n.p,{children:["Both the promise and the timeout are asynchronous operations, the function keeps on running while it's busy completing the promise and handling the ",(0,i.jsx)(n.code,{children:"setTimeout"})," callback. This means that ",(0,i.jsx)(n.code,{children:"Last line 1!"})," gets logged first, since this is not an asynchonous operation."]}),(0,i.jsxs)(n.p,{children:["Since the callstack is not empty yet, the ",(0,i.jsx)(n.code,{children:"setTimeout"})," function and promise in ",(0,i.jsx)(n.code,{children:"funcOne"})," cannot get added to the callstack yet."]}),(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"funcTwo"}),", the variable ",(0,i.jsx)(n.code,{children:"res"})," gets ",(0,i.jsx)(n.code,{children:"Promise"})," because ",(0,i.jsx)(n.code,{children:"Promise.resolve(Promise.resolve('Promise'))"})," is equivalent to ",(0,i.jsx)(n.code,{children:"Promise.resolve('Promise')"})," since resolving a promise just resolves it's value. The ",(0,i.jsx)(n.code,{children:"await"})," in this line stops the execution of the function until it receives the resolution of the promise and then keeps on running synchronously until completion, so ",(0,i.jsx)(n.code,{children:"Promise 2!"})," and then ",(0,i.jsx)(n.code,{children:"Last line 2!"})," are logged and the ",(0,i.jsx)(n.code,{children:"setTimeout"})," is sent to the Web API."]}),(0,i.jsxs)(n.p,{children:["Then the call stack is empty. Promises are ",(0,i.jsx)(n.em,{children:"microtasks"})," so they are resolved first when the call stack is empty so ",(0,i.jsx)(n.code,{children:"Promise 1!"})," gets to be logged."]}),(0,i.jsxs)(n.p,{children:["Now, since ",(0,i.jsx)(n.code,{children:"funcTwo"})," popped off the call stack, the call stack is empty. The callbacks waiting in the queue (",(0,i.jsx)(n.code,{children:'() => console.log("Timeout 1!")'})," from ",(0,i.jsx)(n.code,{children:"funcOne"}),", and ",(0,i.jsx)(n.code,{children:'() => console.log("Timeout 2!")'})," from ",(0,i.jsx)(n.code,{children:"funcTwo"}),") get added to the call stack one by one. The first callback logs ",(0,i.jsx)(n.code,{children:"Timeout 1!"}),", and gets popped off the stack. Then, the second callback logs ",(0,i.jsx)(n.code,{children:"Timeout 2!"}),", and gets popped off the stack."]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"134-how-can-we-invoke-sum-in-sumjs-from-indexjs",children:["134. How can we invoke ",(0,i.jsx)(n.code,{children:"sum"})," in ",(0,i.jsx)(n.code,{children:"sum.js"})," from ",(0,i.jsx)(n.code,{children:"index.js?"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// sum.js\nexport default function sum(x) {\n  return x + x;\n}\n\n// index.js\nimport * as sum from './sum';\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"sum(4)"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"sum.sum(4)"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"sum.default(4)"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: Default aren't imported with ",(0,i.jsx)(n.code,{children:"*"}),", only named exports"]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-c-1",children:"Answer: C"}),(0,i.jsxs)(n.p,{children:["With the asterisk ",(0,i.jsx)(n.code,{children:"*"}),", we import all exported values from that file, both default and named. If we had the following file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// info.js\nexport const name = 'Lydia';\nexport const age = 21;\nexport default 'I love JavaScript';\n\n// index.js\nimport * as info from './info';\nconsole.log(info);\n"})}),(0,i.jsx)(n.p,{children:"The following would get logged:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  default: "I love JavaScript",\n  name: "Lydia",\n  age: 21\n}\n'})}),(0,i.jsxs)(n.p,{children:["For the ",(0,i.jsx)(n.code,{children:"sum"})," example, it means that the imported value ",(0,i.jsx)(n.code,{children:"sum"})," looks like this:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{ default: function sum(x) { return x + x } }\n"})}),(0,i.jsxs)(n.p,{children:["We can invoke this function, by calling ",(0,i.jsx)(n.code,{children:"sum.default"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"135-whats-the-output",children:"135. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const handler = {\n  set: () => console.log('Added a new property!'),\n  get: () => console.log('Accessed a property!'),\n};\n\nconst person = new Proxy({}, handler);\n\nperson.name = 'Lydia';\nperson.name;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"Added a new property!"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"Accessed a property!"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"Added a new property!"})," ",(0,i.jsx)(n.code,{children:"Accessed a property!"})]}),"\n",(0,i.jsx)(n.li,{children:"D: Nothing gets logged"}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-c-2",children:"Answer: C"}),(0,i.jsxs)(n.p,{children:["With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In this case, we pass the ",(0,i.jsx)(n.code,{children:"handler"})," object which contained two properties: ",(0,i.jsx)(n.code,{children:"set"})," and ",(0,i.jsx)(n.code,{children:"get"}),". ",(0,i.jsx)(n.code,{children:"set"})," gets invoked whenever we ",(0,i.jsx)(n.em,{children:"set"})," property values, ",(0,i.jsx)(n.code,{children:"get"})," gets invoked whenever we ",(0,i.jsx)(n.em,{children:"get"})," (access) property values."]}),(0,i.jsxs)(n.p,{children:["The first argument is an empty object ",(0,i.jsx)(n.code,{children:"{}"}),", which is the value of ",(0,i.jsx)(n.code,{children:"person"}),". To this object, the custom behavior specified in the ",(0,i.jsx)(n.code,{children:"handler"})," object gets added. If we add a property to the ",(0,i.jsx)(n.code,{children:"person"})," object, ",(0,i.jsx)(n.code,{children:"set"})," will get invoked. If we access a property on the ",(0,i.jsx)(n.code,{children:"person"})," object, ",(0,i.jsx)(n.code,{children:"get"})," gets invoked."]}),(0,i.jsxs)(n.p,{children:["First, we added a new property ",(0,i.jsx)(n.code,{children:"name"})," to the proxy object (",(0,i.jsx)(n.code,{children:'person.name = "Lydia"'}),"). ",(0,i.jsx)(n.code,{children:"set"})," gets invoked, and logs ",(0,i.jsx)(n.code,{children:'"Added a new property!"'}),"."]}),(0,i.jsxs)(n.p,{children:["Then, we access a property value on the proxy object, the ",(0,i.jsx)(n.code,{children:"get"})," property on the handler object got invoked. ",(0,i.jsx)(n.code,{children:'"Accessed a property!"'})," gets logged."]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"136-which-of-the-following-will-modify-the-person-object",children:["136. Which of the following will modify the ",(0,i.jsx)(n.code,{children:"person"})," object?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const person = { name: 'Lydia Hallie' };\n\nObject.seal(person);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:'person.name = "Evan Bacon"'})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"person.age = 21"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"delete person.name"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"Object.assign(person, { age: 21 })"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-a",children:"Answer: A"}),(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"Object.seal"})," we can prevent new properties from being ",(0,i.jsx)(n.em,{children:"added"}),", or existing properties to be ",(0,i.jsx)(n.em,{children:"removed"}),"."]}),(0,i.jsx)(n.p,{children:"However, you can still modify the value of existing properties."})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"137-which-of-the-following-will-modify-the-person-object",children:["137. Which of the following will modify the ",(0,i.jsx)(n.code,{children:"person"})," object?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const person = {\n  name: 'Lydia Hallie',\n  address: {\n    street: '100 Main St',\n  },\n};\n\nObject.freeze(person);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:'person.name = "Evan Bacon"'})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"delete person.address"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:'person.address.street = "101 Main St"'})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:'person.pet = { name: "Mara" }'})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-c-3",children:"Answer: C"}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Object.freeze"})," method ",(0,i.jsx)(n.em,{children:"freezes"})," an object. No properties can be added, modified, or removed."]}),(0,i.jsxs)(n.p,{children:["However, it only ",(0,i.jsx)(n.em,{children:"shallowly"})," freezes the object, meaning that only ",(0,i.jsx)(n.em,{children:"direct"})," properties on the object are frozen. If the property is another object, like ",(0,i.jsx)(n.code,{children:"address"})," in this case, the properties on that object aren't frozen, and can be modified."]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"138-whats-the-output",children:"138. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const add = (x) => x + x;\n\nfunction myFunc(num = 2, value = add(num)) {\n  console.log(num, value);\n}\n\nmyFunc();\nmyFunc(3);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"2"})," ",(0,i.jsx)(n.code,{children:"4"})," and ",(0,i.jsx)(n.code,{children:"3"})," ",(0,i.jsx)(n.code,{children:"6"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"2"})," ",(0,i.jsx)(n.code,{children:"NaN"})," and ",(0,i.jsx)(n.code,{children:"3"})," ",(0,i.jsx)(n.code,{children:"NaN"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"2"})," ",(0,i.jsx)(n.code,{children:"Error"})," and ",(0,i.jsx)(n.code,{children:"3"})," ",(0,i.jsx)(n.code,{children:"6"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"2"})," ",(0,i.jsx)(n.code,{children:"4"})," and ",(0,i.jsx)(n.code,{children:"3"})," ",(0,i.jsx)(n.code,{children:"Error"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-a-1",children:"Answer: A"}),(0,i.jsxs)(n.p,{children:["First, we invoked ",(0,i.jsx)(n.code,{children:"myFunc()"})," without passing any arguments. Since we didn't pass arguments, ",(0,i.jsx)(n.code,{children:"num"})," and ",(0,i.jsx)(n.code,{children:"value"})," got their default values: num is ",(0,i.jsx)(n.code,{children:"2"}),", and ",(0,i.jsx)(n.code,{children:"value"})," the returned value of the function ",(0,i.jsx)(n.code,{children:"add"}),". To the ",(0,i.jsx)(n.code,{children:"add"})," function, we pass ",(0,i.jsx)(n.code,{children:"num"})," as an argument, which had the value of ",(0,i.jsx)(n.code,{children:"2"}),". ",(0,i.jsx)(n.code,{children:"add"})," returns ",(0,i.jsx)(n.code,{children:"4"}),", which is the value of ",(0,i.jsx)(n.code,{children:"value"}),"."]}),(0,i.jsxs)(n.p,{children:["Then, we invoked ",(0,i.jsx)(n.code,{children:"myFunc(3)"})," and passed the value ",(0,i.jsx)(n.code,{children:"3"})," as the value for the argument ",(0,i.jsx)(n.code,{children:"num"}),". We didn't pass an argument for ",(0,i.jsx)(n.code,{children:"value"}),". Since we didn't pass a value for the ",(0,i.jsx)(n.code,{children:"value"})," argument, it got the default value: the returned value of the ",(0,i.jsx)(n.code,{children:"add"})," function. To ",(0,i.jsx)(n.code,{children:"add"}),", we pass ",(0,i.jsx)(n.code,{children:"num"}),", which has the value of ",(0,i.jsx)(n.code,{children:"3"}),". ",(0,i.jsx)(n.code,{children:"add"})," returns ",(0,i.jsx)(n.code,{children:"6"}),", which is the value of ",(0,i.jsx)(n.code,{children:"value"}),"."]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"139-whats-the-output",children:"139. What's the output?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class Counter {\n  #number = 10;\n\n  increment() {\n    this.#number++;\n  }\n\n  getNum() {\n    return this.#number;\n  }\n}\n\nconst counter = new Counter();\ncounter.increment();\n\nconsole.log(counter.#number);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"10"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"11"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"SyntaxError"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-d-1",children:"Answer: D"}),(0,i.jsxs)(n.p,{children:["In ES2020, we can add private variables in classes by using the ",(0,i.jsx)(n.code,{children:"#"}),". We cannot access these variables outside of the class. When we try to log ",(0,i.jsx)(n.code,{children:"counter.#number"}),", a SyntaxError gets thrown: we cannot acccess it outside the ",(0,i.jsx)(n.code,{children:"Counter"})," class!"]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"140-whats-missing",children:"140. What's missing?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const teams = [\n  { name: 'Team 1', members: ['Paul', 'Lisa'] },\n  { name: 'Team 2', members: ['Laura', 'Tim'] },\n];\n\nfunction* getMembers(members) {\n  for (let i = 0; i < members.length; i++) {\n    yield members[i];\n  }\n}\n\nfunction* getTeams(teams) {\n  for (let i = 0; i < teams.length; i++) {\n    // \u2728 SOMETHING IS MISSING HERE \u2728\n  }\n}\n\nconst obj = getTeams(teams);\nobj.next(); // { value: \"Paul\", done: false }\nobj.next(); // { value: \"Lisa\", done: false }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A: ",(0,i.jsx)(n.code,{children:"yield getMembers(teams[i].members)"})]}),"\n",(0,i.jsxs)(n.li,{children:["B: ",(0,i.jsx)(n.code,{children:"yield* getMembers(teams[i].members)"})]}),"\n",(0,i.jsxs)(n.li,{children:["C: ",(0,i.jsx)(n.code,{children:"return getMembers(teams[i].members)"})]}),"\n",(0,i.jsxs)(n.li,{children:["D: ",(0,i.jsx)(n.code,{children:"return yield getMembers(teams[i].members)"})]}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Answer"})}),(0,i.jsxs)("p",{children:[(0,i.jsx)(n.h4,{id:"answer-b-1",children:"Answer: B"}),(0,i.jsxs)(n.p,{children:["In order to iterate over the ",(0,i.jsx)(n.code,{children:"members"})," in each element in the ",(0,i.jsx)(n.code,{children:"teams"})," array, we need to pass ",(0,i.jsx)(n.code,{children:"teams[i].members"})," to the ",(0,i.jsx)(n.code,{children:"getMembers"})," generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use ",(0,i.jsx)(n.code,{children:"yield*"}),"."]}),(0,i.jsxs)(n.p,{children:["If we would've written ",(0,i.jsx)(n.code,{children:"yield"}),", ",(0,i.jsx)(n.code,{children:"return yield"}),", or ",(0,i.jsx)(n.code,{children:"return"}),", the entire generator function would've gotten returned the first time we called the ",(0,i.jsx)(n.code,{children:"next"})," method."]})]})]})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},75251:(e,n,s)=>{var i=s(67294),r=Symbol.for("react.element"),c=Symbol.for("react.fragment"),t=Object.prototype.hasOwnProperty,o=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function l(e,n,s){var i,c={},l=null,h=null;for(i in void 0!==s&&(l=""+s),void 0!==n.key&&(l=""+n.key),void 0!==n.ref&&(h=n.ref),n)t.call(n,i)&&!d.hasOwnProperty(i)&&(c[i]=n[i]);if(e&&e.defaultProps)for(i in n=e.defaultProps)void 0===c[i]&&(c[i]=n[i]);return{$$typeof:r,type:e,key:l,ref:h,props:c,_owner:o.current}}n.Fragment=c,n.jsx=l,n.jsxs=l},85893:(e,n,s)=>{e.exports=s(75251)},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>t});var i=s(67294);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);