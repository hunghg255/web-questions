/*! For license information please see fdeb9019.0b229f68.js.LICENSE.txt */
"use strict";(self.webpackChunkweb_totals=self.webpackChunkweb_totals||[]).push([[2576],{52795:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var r=s(85893),i=s(11151);const t={sidebar_position:6,title:"Question 51 - 60",comment:!0,tags:["Javascript"]},c=void 0,l={id:"javascripts/question-6",title:"Question 51 - 60",description:"51. What's the output?",source:"@site/questions/javascripts/question-6.md",sourceDirName:"javascripts",slug:"/javascripts/question-6",permalink:"/questions/javascripts/question-6",draft:!1,unlisted:!1,editUrl:"https://github.com/hunghg255/web-totals/tree/main/questions/javascripts/question-6.md",tags:[{label:"Javascript",permalink:"/questions/tags/javascript"}],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Question 51 - 60",comment:!0,tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Question 41 - 50",permalink:"/questions/javascripts/question-5"},next:{title:"Question 61 - 70",permalink:"/questions/javascripts/question-7"}},d={},o=[{value:"51. What&#39;s the output?",id:"51-whats-the-output",level:3},{value:"Answer: A",id:"answer-a",level:4},{value:"52. What&#39;s the output?",id:"52-whats-the-output",level:3},{value:"Answer: D",id:"answer-d",level:4},{value:"53. What&#39;s the output?",id:"53-whats-the-output",level:3},{value:"Answer: B",id:"answer-b",level:4},{value:"54. What&#39;s the output?",id:"54-whats-the-output",level:3},{value:"Answer: A",id:"answer-a-1",level:4},{value:"55. What&#39;s the output?",id:"55-whats-the-output",level:3},{value:"Answer: A",id:"answer-a-2",level:4},{value:"56. What&#39;s the output?",id:"56-whats-the-output",level:3},{value:"Answer: D",id:"answer-d-1",level:4},{value:"57. What&#39;s the output?",id:"57-whats-the-output",level:3},{value:"Answer: C",id:"answer-c",level:4},{value:"58. What&#39;s the output?",id:"58-whats-the-output",level:3},{value:"Answer: A",id:"answer-a-3",level:4},{value:"59. What&#39;s the output?",id:"59-whats-the-output",level:3},{value:"Answer: C",id:"answer-c-1",level:4},{value:"60. What&#39;s the output?",id:"60-whats-the-output",level:3},{value:"Answer: B",id:"answer-b-1",level:4}];function a(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"51-whats-the-output",children:"51. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function getInfo(member, year) {\n  member.name = 'Lydia';\n  year = '1998';\n}\n\nconst person = { name: 'Sarah' };\nconst birthYear = '1997';\n\ngetInfo(person, birthYear);\n\nconsole.log(person, birthYear);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'{ name: "Lydia" }, "1997"'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'{ name: "Sarah" }, "1998"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'{ name: "Lydia" }, "1998"'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:'{ name: "Sarah" }, "1997"'})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:["Arguments are passed by ",(0,r.jsx)(n.em,{children:"value"}),", unless their value is an object, then they're passed by ",(0,r.jsx)(n.em,{children:"reference"}),". ",(0,r.jsx)(n.code,{children:"birthYear"})," is passed by value, since it's a string, not an object. When we pass arguments by value, a ",(0,r.jsx)(n.em,{children:"copy"})," of that value is created (see question 46)."]}),(0,r.jsxs)(n.p,{children:["The variable ",(0,r.jsx)(n.code,{children:"birthYear"})," has a reference to the value ",(0,r.jsx)(n.code,{children:'"1997"'}),". The argument ",(0,r.jsx)(n.code,{children:"year"})," also has a reference to the value ",(0,r.jsx)(n.code,{children:'"1997"'}),", but it's not the same value as ",(0,r.jsx)(n.code,{children:"birthYear"})," has a reference to. When we update the value of ",(0,r.jsx)(n.code,{children:"year"})," by setting ",(0,r.jsx)(n.code,{children:"year"})," equal to ",(0,r.jsx)(n.code,{children:'"1998"'}),", we are only updating the value of ",(0,r.jsx)(n.code,{children:"year"}),". ",(0,r.jsx)(n.code,{children:"birthYear"})," is still equal to ",(0,r.jsx)(n.code,{children:'"1997"'}),"."]}),(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.code,{children:"person"})," is an object. The argument ",(0,r.jsx)(n.code,{children:"member"})," has a (copied) reference to the ",(0,r.jsx)(n.em,{children:"same"})," object. When we modify a property of the object ",(0,r.jsx)(n.code,{children:"member"})," has a reference to, the value of ",(0,r.jsx)(n.code,{children:"person"})," will also be modified, since they both have a reference to the same object. ",(0,r.jsx)(n.code,{children:"person"}),"'s ",(0,r.jsx)(n.code,{children:"name"})," property is now equal to the value ",(0,r.jsx)(n.code,{children:'"Lydia"'})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"52-whats-the-output",children:"52. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function greeting() {\n  throw 'Hello world!';\n}\n\nfunction sayHi() {\n  try {\n    const data = greeting();\n    console.log('It worked!', data);\n  } catch (e) {\n    console.log('Oh no an error:', e);\n  }\n}\n\nsayHi();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"It worked! Hello world!"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"Oh no an error: undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"SyntaxError: can only throw Error objects"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"Oh no an error: Hello world!"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"throw"})," statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a ",(0,r.jsx)("b",{children:"string"}),", a ",(0,r.jsx)("b",{children:"number"}),", a ",(0,r.jsx)("b",{children:"boolean"})," or an ",(0,r.jsx)("b",{children:"object"}),". In this case, our exception is the string ",(0,r.jsx)(n.code,{children:"'Hello world!'"}),"."]}),(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"catch"})," statement, we can specify what to do if an exception is thrown in the ",(0,r.jsx)(n.code,{children:"try"})," block. An exception is thrown: the string ",(0,r.jsx)(n.code,{children:"'Hello world!'"}),". ",(0,r.jsx)(n.code,{children:"e"})," is now equal to that string, which we log. This results in ",(0,r.jsx)(n.code,{children:"'Oh an error: Hello world!'"}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"53-whats-the-output",children:"53. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function Car() {\n  this.make = 'Lamborghini';\n  return { make: 'Maserati' };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'"Lamborghini"'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"Maserati"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"ReferenceError"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"TypeError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:["When you return a property, the value of the property is equal to the ",(0,r.jsx)(n.em,{children:"returned"})," value, not the value set in the constructor function. We return the string ",(0,r.jsx)(n.code,{children:'"Maserati"'}),", so ",(0,r.jsx)(n.code,{children:"myCar.make"})," is equal to ",(0,r.jsx)(n.code,{children:'"Maserati"'}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"54-whats-the-output",children:"54. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"(() => {\n  let x = (y = 10);\n})();\n\nconsole.log(typeof x);\nconsole.log(typeof y);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'"undefined", "number"'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"number", "number"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'"object", "number"'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:'"number", "undefined"'})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a-1",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"let x = (y = 10);"})," is actually shorthand for:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"y = 10;\nlet x = y;\n"})}),(0,r.jsxs)(n.p,{children:["When we set ",(0,r.jsx)(n.code,{children:"y"})," equal to ",(0,r.jsx)(n.code,{children:"10"}),", we actually add a property ",(0,r.jsx)(n.code,{children:"y"})," to the global object (",(0,r.jsx)(n.code,{children:"window"})," in browser, ",(0,r.jsx)(n.code,{children:"global"})," in Node). In a browser, ",(0,r.jsx)(n.code,{children:"window.y"})," is now equal to ",(0,r.jsx)(n.code,{children:"10"}),"."]}),(0,r.jsxs)(n.p,{children:["Then, we declare a variable ",(0,r.jsx)(n.code,{children:"x"})," with the value of ",(0,r.jsx)(n.code,{children:"y"}),", which is ",(0,r.jsx)(n.code,{children:"10"}),". Variables declared with the ",(0,r.jsx)(n.code,{children:"let"})," keyword are ",(0,r.jsx)(n.em,{children:"block scoped"}),", they are only defined within the block they're declared in; the immediately invoked function expression (IIFE) in this case. When we use the ",(0,r.jsx)(n.code,{children:"typeof"})," operator, the operand ",(0,r.jsx)(n.code,{children:"x"})," is not defined: we are trying to access ",(0,r.jsx)(n.code,{children:"x"})," outside of the block it's declared in. This means that ",(0,r.jsx)(n.code,{children:"x"})," is not defined. Values who haven't been assigned a value or declared are of type ",(0,r.jsx)(n.code,{children:'"undefined"'}),". ",(0,r.jsx)(n.code,{children:"console.log(typeof x)"})," returns ",(0,r.jsx)(n.code,{children:'"undefined"'}),"."]}),(0,r.jsxs)(n.p,{children:["However, we created a global variable ",(0,r.jsx)(n.code,{children:"y"})," when setting ",(0,r.jsx)(n.code,{children:"y"})," equal to ",(0,r.jsx)(n.code,{children:"10"}),". This value is accessible anywhere in our code. ",(0,r.jsx)(n.code,{children:"y"})," is defined, and holds a value of type ",(0,r.jsx)(n.code,{children:'"number"'}),". ",(0,r.jsx)(n.code,{children:"console.log(typeof y)"})," returns ",(0,r.jsx)(n.code,{children:'"number"'}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"55-whats-the-output",children:"55. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nDog.prototype.bark = function () {\n  console.log(`Woof I am ${this.name}`);\n};\n\nconst pet = new Dog('Mara');\n\npet.bark();\n\ndelete Dog.prototype.bark;\n\npet.bark();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'"Woof I am Mara"'}),", ",(0,r.jsx)(n.code,{children:"TypeError"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"Woof I am Mara"'}),", ",(0,r.jsx)(n.code,{children:'"Woof I am Mara"'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'"Woof I am Mara"'}),", ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"TypeError"}),", ",(0,r.jsx)(n.code,{children:"TypeError"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a-2",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:["We can delete properties from objects using the ",(0,r.jsx)(n.code,{children:"delete"})," keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the ",(0,r.jsx)(n.code,{children:"bark"})," function is not available anymore on the prototype after ",(0,r.jsx)(n.code,{children:"delete Dog.prototype.bark"}),", yet we still try to access it."]}),(0,r.jsxs)(n.p,{children:["When we try to invoke something that is not a function, a ",(0,r.jsx)(n.code,{children:"TypeError"})," is thrown. In this case ",(0,r.jsx)(n.code,{children:"TypeError: pet.bark is not a function"}),", since ",(0,r.jsx)(n.code,{children:"pet.bark"})," is ",(0,r.jsx)(n.code,{children:"undefined"}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"56-whats-the-output",children:"56. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const set = new Set([1, 1, 2, 3, 4]);\n\nconsole.log(set);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"[1, 1, 2, 3, 4]"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4]"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"{1, 1, 2, 3, 4}"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"{1, 2, 3, 4}"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-d-1",children:"Answer: D"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Set"})," object is a collection of ",(0,r.jsx)(n.em,{children:"unique"})," values: a value can only occur once in a set."]}),(0,r.jsxs)(n.p,{children:["We passed the iterable ",(0,r.jsx)(n.code,{children:"[1, 1, 2, 3, 4]"})," with a duplicate value ",(0,r.jsx)(n.code,{children:"1"}),". Since we cannot have two of the same values in a set, one of them is removed. This results in ",(0,r.jsx)(n.code,{children:"{1, 2, 3, 4}"}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"57-whats-the-output",children:"57. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// counter.js\nlet counter = 10;\nexport default counter;\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// index.js\nimport myCounter from './counter';\n\nmyCounter += 1;\n\nconsole.log(myCounter);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"10"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"11"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"Error"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"NaN"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c",children:"Answer: C"}),(0,r.jsxs)(n.p,{children:["An imported module is ",(0,r.jsx)(n.em,{children:"read-only"}),": you cannot modify the imported module. Only the module that exports them can change its value."]}),(0,r.jsxs)(n.p,{children:["When we try to increment the value of ",(0,r.jsx)(n.code,{children:"myCounter"}),", it throws an error: ",(0,r.jsx)(n.code,{children:"myCounter"})," is read-only and cannot be modified."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"58-whats-the-output",children:"58. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const name = 'Lydia';\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"false"}),", ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'"Lydia"'}),", ",(0,r.jsx)(n.code,{children:"21"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"true"}),", ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"undefined"}),", ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-a-3",children:"Answer: A"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"delete"})," operator returns a boolean value: ",(0,r.jsx)(n.code,{children:"true"})," on a successful deletion, else it'll return ",(0,r.jsx)(n.code,{children:"false"}),". However, variables declared with the ",(0,r.jsx)(n.code,{children:"var"}),", ",(0,r.jsx)(n.code,{children:"const"})," or ",(0,r.jsx)(n.code,{children:"let"})," keyword cannot be deleted using the ",(0,r.jsx)(n.code,{children:"delete"})," operator."]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"name"})," variable was declared with a ",(0,r.jsx)(n.code,{children:"const"})," keyword, so its deletion is not successful: ",(0,r.jsx)(n.code,{children:"false"})," is returned. When we set ",(0,r.jsx)(n.code,{children:"age"})," equal to ",(0,r.jsx)(n.code,{children:"21"}),", we actually added a property called ",(0,r.jsx)(n.code,{children:"age"})," to the global object. You can successfully delete properties from objects this way, also the global object, so ",(0,r.jsx)(n.code,{children:"delete age"})," returns ",(0,r.jsx)(n.code,{children:"true"}),"."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"59-whats-the-output",children:"59. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:"[[1, 2, 3, 4, 5]]"})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:"[1, 2, 3, 4, 5]"})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:"1"})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"[1]"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-c-1",children:"Answer: C"}),(0,r.jsx)(n.p,{children:"We can unpack values from arrays or properties from objects through destructuring. For example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"[a, b] = [1, 2];\n"})}),(0,r.jsx)("img",{src:"https://i.imgur.com/ADFpVop.png",width:"200"}),(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.code,{children:"a"})," is now ",(0,r.jsx)(n.code,{children:"1"}),", and the value of ",(0,r.jsx)(n.code,{children:"b"})," is now ",(0,r.jsx)(n.code,{children:"2"}),". What we actually did in the question, is:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"[y] = [1, 2, 3, 4, 5];\n"})}),(0,r.jsx)("img",{src:"https://i.imgur.com/NzGkMNk.png",width:"200"}),(0,r.jsxs)(n.p,{children:["This means that the value of ",(0,r.jsx)(n.code,{children:"y"})," is equal to the first value in the array, which is the number ",(0,r.jsx)(n.code,{children:"1"}),". When we log ",(0,r.jsx)(n.code,{children:"y"}),", ",(0,r.jsx)(n.code,{children:"1"})," is returned."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"60-whats-the-output",children:"60. What's the output?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const user = { name: 'Lydia', age: 21 };\nconst admin = { admin: true, ...user };\n\nconsole.log(admin);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A: ",(0,r.jsx)(n.code,{children:'{ admin: true, user: { name: "Lydia", age: 21 } }'})]}),"\n",(0,r.jsxs)(n.li,{children:["B: ",(0,r.jsx)(n.code,{children:'{ admin: true, name: "Lydia", age: 21 }'})]}),"\n",(0,r.jsxs)(n.li,{children:["C: ",(0,r.jsx)(n.code,{children:'{ admin: true, user: ["Lydia", 21] }'})]}),"\n",(0,r.jsxs)(n.li,{children:["D: ",(0,r.jsx)(n.code,{children:"{ admin: true }"})]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"Answer"})}),(0,r.jsxs)("p",{children:[(0,r.jsx)(n.h4,{id:"answer-b-1",children:"Answer: B"}),(0,r.jsxs)(n.p,{children:["It's possible to combine objects using the spread operator ",(0,r.jsx)(n.code,{children:"..."}),". It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the ",(0,r.jsx)(n.code,{children:"user"})," object, and add them to the ",(0,r.jsx)(n.code,{children:"admin"})," object. The ",(0,r.jsx)(n.code,{children:"admin"})," object now contains the copied key/value pairs, which results in ",(0,r.jsx)(n.code,{children:'{ admin: true, name: "Lydia", age: 21 }'}),"."]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},75251:(e,n,s)=>{var r=s(67294),i=Symbol.for("react.element"),t=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function o(e,n,s){var r,t={},o=null,a=null;for(r in void 0!==s&&(o=""+s),void 0!==n.key&&(o=""+n.key),void 0!==n.ref&&(a=n.ref),n)c.call(n,r)&&!d.hasOwnProperty(r)&&(t[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===t[r]&&(t[r]=n[r]);return{$$typeof:i,type:e,key:o,ref:a,props:t,_owner:l.current}}n.Fragment=t,n.jsx=o,n.jsxs=o},85893:(e,n,s)=>{e.exports=s(75251)},11151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>c});var r=s(67294);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);